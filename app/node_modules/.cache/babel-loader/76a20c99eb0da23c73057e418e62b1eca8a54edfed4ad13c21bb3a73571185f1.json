{"ast":null,"code":"var _jsxFileName = \"/home/bmzi/Dev/react/udemycourse/test/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [amount, setAmount] = useState(1);\n  const [fromCur, setFromCur] = useState(\"EUR\");\n  const [toCur, setToCur] = useState(\"USD\");\n  const [converted, setConverted] = useState(\"\"); // Step 4.\n\n  // Step 1.\n  useEffect(function () {\n    async function convert() {\n      // Step 2.\n      const res = await fetch(`https://api.frankfurter.app/latest?amount=${amount}&from=${fromCur}&to=${toCur}`);\n      const data = await res.json();\n      // Step 3.\n      console.log(data.rates[toCur]);\n      // [...] Step 4.\n      setConverted(data.rates[toCur]);\n    }\n    convert();\n  },\n  // Step 5.\n  [amount, fromCur, toCur]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: amount,\n      onChange: e => setAmount(Number(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: fromCur,\n      onChange: e => setFromCur(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"USD\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EUR\",\n        children: \"EUR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAD\",\n        children: \"CAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"INR\",\n        children: \"INR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: toCur,\n      onChange: e => setToCur(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"USD\",\n        children: \"USD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"EUR\",\n        children: \"EUR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"CAD\",\n        children: \"CAD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"INR\",\n        children: \"INR\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [converted, \" \", toCur]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n/*\n\n- Step 1.\nWe use effect to fetch from API on mount element.\nBecause an effect function cannot be a async function, we create another one inside effect,\nand we name that function convert. then we will call that function.\n\n- Step 2.\nThe result of fetch() function is a promise and is stored in res.\nWe use the json format for res in console.log to see the data format coming from API.\n\n- Step 3.\nLooking into the console, at the rate abject we need to hardcode the property value for USD, \n(in our case the USD is selected as default) and then use it as toCur and display it as output.\n\n- Step 4.\nThe converted rate displayed in console need to be stored in the state variable converted.\nThen replace the console log with converted value.\n\n- Step 5.\nNow we make the effect function to listen to any changes in one of the three variables amount, \nfromCur and toCur. This makes the effect to rerun when changes happen for those three state \nvariables and so it will be sycronized all together.\n\n\n*/\n_s(App, \"KvsGuj1XGWLSlQ6gpsg6R9147T4=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","App","_s","amount","setAmount","fromCur","setFromCur","toCur","setToCur","converted","setConverted","convert","res","fetch","data","json","console","log","rates","children","type","value","onChange","e","Number","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bmzi/Dev/react/udemycourse/test/src/App.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  const [amount, setAmount] = useState(1);\n  const [fromCur, setFromCur] = useState(\"EUR\");\n  const [toCur, setToCur] = useState(\"USD\");\n  const [converted, setConverted] = useState(\"\"); // Step 4.\n\n  // Step 1.\n  useEffect(\n    function () {\n      async function convert() {\n        // Step 2.\n        const res = await fetch(\n          `https://api.frankfurter.app/latest?amount=${amount}&from=${fromCur}&to=${toCur}`\n        );\n        const data = await res.json();\n        // Step 3.\n        console.log(data.rates[toCur]);\n        // [...] Step 4.\n        setConverted(data.rates[toCur]);\n      }\n      convert();\n    },\n    // Step 5.\n    [amount, fromCur, toCur]\n  );\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={amount}\n        onChange={(e) => setAmount(Number(e.target.value))}\n      />\n\n      <select value={fromCur} onChange={(e) => setFromCur(e.target.value)}>\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n        <option value=\"CAD\">CAD</option>\n        <option value=\"INR\">INR</option>\n      </select>\n\n      <select value={toCur} onChange={(e) => setToCur(e.target.value)}>\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n        <option value=\"CAD\">CAD</option>\n        <option value=\"INR\">INR</option>\n      </select>\n      {/* [...][...] Step 4. */}\n      {/* <p>OUTPUT</p> */}\n      <p>\n        {converted} {toCur}\n      </p>\n    </div>\n  );\n}\n\n/*\n\n- Step 1.\nWe use effect to fetch from API on mount element.\nBecause an effect function cannot be a async function, we create another one inside effect,\nand we name that function convert. then we will call that function.\n\n- Step 2.\nThe result of fetch() function is a promise and is stored in res.\nWe use the json format for res in console.log to see the data format coming from API.\n\n- Step 3.\nLooking into the console, at the rate abject we need to hardcode the property value for USD, \n(in our case the USD is selected as default) and then use it as toCur and display it as output.\n\n- Step 4.\nThe converted rate displayed in console need to be stored in the state variable converted.\nThen replace the console log with converted value.\n\n- Step 5.\nNow we make the effect function to listen to any changes in one of the three variables amount, \nfromCur and toCur. This makes the effect to rerun when changes happen for those three state \nvariables and so it will be sycronized all together.\n\n\n*/\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}